library(ElemStatLearn)
head(zip.train)
data("zip.train")
data("zip.test")
unique(zip.train[,1])
traindata<-zip.train[which(zip.train[,1]==2),]
traindata1<-zip.train[which(zip.train[,1]==3),]
finaltrain<-rbind(traindata,traindata1)
finaltrain<-as.data.frame(finaltrain)
unique(finaltrain[,1])
### testdata preprocessing
testdata<-zip.test[which(zip.test[,1]==2),]
testdata1<-zip.test[which(zip.test[,1]==3),]
finaltest<-rbind(testdata,testdata1)
unique(finaltest[,1])
finaltest<-as.data.frame(finaltest)
lm_train<-lm(finaltrain$V1~.,data = finaltrain)
summary(lm_train)
# predicting on test data
finaltest_noV1<-finaltest[,-1]
lm_predictions<-predict(lm_train,finaltest_noV1)
difference<-lm_predictions-finaltest$V1
misclassificationrate_lm<-mean(difference^2)
##### building knn model
install.packages("class")
library(class)
kvalues<-c(1,3,5,7,9,11,13,15)
errorvec<-c()
for(i in kvalues){
knn_model<-knn(finaltrain[,-1],finaltest_noV1,finaltrain$V1,k=i)
difference_knn<-as.numeric(knn_model)-finaltest$V1
testerror<-mean(difference_knn^2)
errorvec<-c(errorvec,testerror)
}
errorvec
plot(errorvec, type="b")
abline(h=misclassificationrate_lm)
knn_model
finaltest$V1
errorvec
