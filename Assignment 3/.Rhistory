summary(log.fit_set1)
log_pred_train_set1<-predict(log.fit_set1,newdata = train_nopred_set1,type = 'response')
log_pred_train_set1[which(log_pred_train_set1>0.5)]=1
log_pred_train_set1[which(log_pred_train_set1<=0.5)]=0
y_train_set1<-as.numeric(traindata_set1$crim_med)-1
train_err_log_set1<-sum(abs(log_pred_train_set1-y_train_set1))/length(y_train_set1)
log_pred_test_set1<-predict(log.fit_set1,newdata = test_nopred_set1,type = 'response')
log_pred_test_set1[which(log_pred_test_set1>0.5)]=1
log_pred_test_set1[which(log_pred_test_set1<=0.5)]=0
y_test_set1<-as.numeric(testdata_set1$crim_med)-1
test_err_log_set1<-sum(abs(log_pred_test_set1-y_test_set1))/length(y_test_set1)
### KNN ###
library(class)
knn_model_set1<-knn(train_nopred_set1,test_nopred_set1,traindata_set1$crim_med,k=3)
y_test_set1<-as.numeric(testdata_set1$crim_med)-1
knn_pred_test_set1<-as.numeric(knn_model_set1)-1
test_err_knn_set1<-sum(abs(knn_pred_test_set1-y_test_set1))/length(y_test_set1)
length(mydata_set2$crim)/2
median_crim<-mydata$crim[length(mydata_set2$crim)/2]
mydata_set2['crim_med']=0
mydata_set2$crim_med[which(mydata_set2$crim>median_crim)]=1
mydata_set2$crim<-NULL
str(mydata_set2$crim_med)
mydata_set2$crim_med<-as.factor(mydata_set2$crim_med)
## test-train split ##
library(caret)
set.seed(123)
datasplit<-createDataPartition(mydata_set2$crim_med,p=0.75,list = F)
traindata_set2<-mydata_set2[datasplit,]
testdata_set2<-mydata_set2[-datasplit,]
summary(mydata_set2$crim_med)
lda.fit_set2<-lda(crim_med~.,data=traindata_set2)
names(lda.fit_set2)
lda.fit_set2
summary(lda.fit_set2)
train_nopred_set2<-subset(traindata_set2,select =-crim_med)
lda_pred_train_set2<-predict(lda.fit_set2,train_nopred_set2)
y_hat_train_set2<-as.numeric(lda_pred_train_set2$class)-1
mydata<-Boston
mydata_set1<-subset(mydata,select = c(zn,nox,dis,rad,ptratio,black,lstat,medv,crim))
mydata_set2<-subset(mydata,select = c(zn,rad,tax,black,lstat,crim))
sum(is.na(mydata))
str(mydata)
length(mydata$crim)/2
median_crim<-mydata$crim[length(mydata$crim)/2]
str(mydata$crim)
summary(mydata$crim)
mydata['crim_med']=0
mydata$crim_med[which(mydata$crim>median_crim)]=1
mydata$crim<-NULL
str(mydata$crim_med)
mydata$crim_med<-as.factor(mydata$crim_med)
## test-train split ##
library(caret)
set.seed(123)
datasplit<-createDataPartition(mydata$crim_med,p=0.75,list = F)
traindata<-mydata[datasplit,]
testdata<-mydata[-datasplit,]
summary(mydata$crim_med)
lda.fit<-lda(crim_med~.,data=traindata)
names(lda.fit)
lda.fit
summary(lda.fit)
train_nopred<-subset(traindata,select =-crim_med)
lda_pred_train<-predict(lda.fit,train_nopred)
y_hat_train<-as.numeric(lda_pred_train$class)-1
y_train<-as.numeric(traindata$crim_med)-1
train_err_lda<-sum(abs(y_hat_train-y_train))/length(y_train)
test_nopred<-subset(testdata,select =-crim_med)
lda_pred_test<-predict(lda.fit,test_nopred)
y_hat_test<-as.numeric(lda_pred_test$class)-1
y_test<-as.numeric(testdata$crim_med)-1
test_err_lda<-sum(abs(y_hat_test-y_test))/length(y_test)
### Logistic Regression ####
str(traindata)
log.fit<-glm(crim_med~.,data = traindata,family = 'binomial')
summary(log.fit)
log_pred_train<-predict(log.fit,newdata = train_nopred,type = 'response')
log_pred_train[which(log_pred_train>0.5)]=1
log_pred_train[which(log_pred_train<=0.5)]=0
y_train<-as.numeric(traindata$crim_med)-1
train_err_log<-sum(abs(log_pred_train-y_train))/length(y_train)
log_pred_test<-predict(log.fit,newdata = test_nopred,type = 'response')
log_pred_test[which(log_pred_test>0.5)]=1
log_pred_test[which(log_pred_test<=0.5)]=0
y_test<-as.numeric(testdata$crim_med)-1
test_err_log<-sum(abs(log_pred_test-y_test))/length(y_test)
### KNN ####
library(class)
knn_model<-knn(train_nopred,test_nopred,traindata$crim_med,k=3)
y_test<-as.numeric(testdata$crim_med)-1
knn_pred_test<-as.numeric(knn_model)-1
test_err_knn<-sum(abs(knn_pred_test-y_test))/length(y_test)
length(mydata_set1$crim)/2
median_crim<-mydata_set1$crim[length(mydata_set1$crim)/2]
mydata_set1['crim_med']=0
mydata_set1$crim_med[which(mydata_set1$crim>median_crim)]=1
mydata_set1$crim<-NULL
str(mydata_set1$crim_med)
mydata_set1$crim_med<-as.factor(mydata_set1$crim_med)
## test-train split ##
library(caret)
set.seed(123)
datasplit<-createDataPartition(mydata_set1$crim_med,p=0.75,list = F)
traindata_set1<-mydata_set1[datasplit,]
testdata_set1<-mydata_set1[-datasplit,]
summary(mydata_set1$crim_med)
lda.fit_set1<-lda(crim_med~.,data=traindata_set1)
names(lda.fit_set1)
lda.fit_set1
summary(lda.fit_set1)
train_nopred_set1<-subset(traindata_set1,select =-crim_med)
lda_pred_train_set1<-predict(lda.fit_set1,train_nopred_set1)
y_hat_train_set1<-as.numeric(lda_pred_train_set1$class)-1
y_train_set1<-as.numeric(traindata_set1$crim_med)-1
train_err_lda_set1<-sum(abs(y_hat_train_set1-y_train_set1))/length(y_train_set1)
test_nopred_set1<-subset(testdata_set1,select =-crim_med)
lda_pred_test_set1<-predict(lda.fit_set1,test_nopred_set1)
y_hat_test_set1<-as.numeric(lda_pred_test_set1$class)-1
y_test_set1<-as.numeric(testdata_set1$crim_med)-1
test_err_lda_set1<-sum(abs(y_hat_test_set1-y_test_set1))/length(y_test_set1)
### Logistic Regression ###
str(traindata_set1)
log.fit_set1<-glm(crim_med~.,data = traindata_set1,family = 'binomial')
summary(log.fit_set1)
log_pred_train_set1<-predict(log.fit_set1,newdata = train_nopred_set1,type = 'response')
log_pred_train_set1[which(log_pred_train_set1>0.5)]=1
log_pred_train_set1[which(log_pred_train_set1<=0.5)]=0
y_train_set1<-as.numeric(traindata_set1$crim_med)-1
train_err_log_set1<-sum(abs(log_pred_train_set1-y_train_set1))/length(y_train_set1)
log_pred_test_set1<-predict(log.fit_set1,newdata = test_nopred_set1,type = 'response')
log_pred_test_set1[which(log_pred_test_set1>0.5)]=1
log_pred_test_set1[which(log_pred_test_set1<=0.5)]=0
y_test_set1<-as.numeric(testdata_set1$crim_med)-1
test_err_log_set1<-sum(abs(log_pred_test_set1-y_test_set1))/length(y_test_set1)
### KNN ###
library(class)
knn_model_set1<-knn(train_nopred_set1,test_nopred_set1,traindata_set1$crim_med,k=3)
y_test_set1<-as.numeric(testdata_set1$crim_med)-1
knn_pred_test_set1<-as.numeric(knn_model_set1)-1
test_err_knn_set1<-sum(abs(knn_pred_test_set1-y_test_set1))/length(y_test_set1)
length(mydata_set2$crim)/2
length(mydata_set2$crim)/2
median_crim<-mydata_set2$crim[length(mydata_set2$crim)/2]
mydata_set2['crim_med']=0
mydata_set2$crim_med[which(mydata_set2$crim>median_crim)]=1
mydata_set2$crim<-NULL
str(mydata_set2$crim_med)
mydata_set2$crim_med<-as.factor(mydata_set2$crim_med)
## test-train split ##
library(caret)
set.seed(123)
datasplit<-createDataPartition(mydata_set2$crim_med,p=0.75,list = F)
traindata_set2<-mydata_set2[datasplit,]
testdata_set2<-mydata_set2[-datasplit,]
summary(mydata_set2$crim_med)
lda.fit_set2<-lda(crim_med~.,data=traindata_set2)
names(lda.fit_set2)
lda.fit_set2
summary(lda.fit_set2)
train_nopred_set2<-subset(traindata_set2,select =-crim_med)
lda_pred_train_set2<-predict(lda.fit_set2,train_nopred_set2)
y_hat_train_set2<-as.numeric(lda_pred_train_set2$class)-1
y_train_set2<-as.numeric(traindata_set2$crim_med)-1
train_err_lda_set2<-sum(abs(y_hat_train_set2-y_train_set2))/length(y_train_set2)
test_nopred_set2<-subset(testdata_set2,select =-crim_med)
lda_pred_test_set2<-predict(lda.fit_set2,test_nopred_set2)
y_hat_test_set2<-as.numeric(lda_pred_test_set2$class)-1
y_test_set2<-as.numeric(testdata_set2$crim_med)-1
test_err_lda_set2<-sum(abs(y_hat_test_set2-y_test_set2))/length(y_test_set2)
### Logistic Regression ###
str(traindata_set2)
log.fit_set2<-glm(crim_med~.,data = traindata_set2,family = 'binomial')
summary(log.fit_set2)
log_pred_train_set2<-predict(log.fit_set2,newdata = train_nopred_set2,type = 'response')
log_pred_train_set2[which(log_pred_train_set2>0.5)]=1
log_pred_train_set2[which(log_pred_train_set2<=0.5)]=0
y_train_set2<-as.numeric(traindata_set2$crim_med)-1
train_err_log_set2<-sum(abs(log_pred_train_set2-y_train_set2))/length(y_train_set2)
log_pred_test_set2<-predict(log.fit_set2,newdata = test_nopred_set2,type = 'response')
log_pred_test_set2[which(log_pred_test_set2>0.5)]=1
log_pred_test_set2[which(log_pred_test_set2<=0.5)]=0
y_test_set2<-as.numeric(testdata_set2$crim_med)-1
test_err_log_set2<-sum(abs(log_pred_test_set2-y_test_set2))/length(y_test_set2)
### KNN ###
library(class)
knn_model_set2<-knn(train_nopred_set2,test_nopred_set2,traindata_set2$crim_med,k=3)
y_test_set2<-as.numeric(testdata_set2$crim_med)-1
knn_pred_test_set2<-as.numeric(knn_model_set2)-1
test_err_knn_set2<-sum(abs(knn_pred_test_set2-y_test_set2))/length(y_test_set2)
# install.packages("ISLR")
# install.packages("MMST")
library(ISLR)
library(MASS)
library(MMST)
mydata<-Boston
mydata_set1<-subset(mydata,select = c(zn,nox,dis,rad,ptratio,black,lstat,medv,crim))
mydata_set2<-subset(mydata,select = c(zn,rad,tax,black,lstat,crim))
sum(is.na(mydata))
# library(MMST)
mydata<-Boston
mydata_set1<-subset(mydata,select = c(zn,nox,dis,rad,ptratio,black,lstat,medv,crim))
mydata_set2<-subset(mydata,select = c(zn,rad,tax,black,lstat,crim))
sum(is.na(mydata))
str(mydata)
length(mydata$crim)/2
median_crim<-mydata$crim[length(mydata$crim)/2]
str(mydata$crim)
summary(mydata$crim)
mydata['crim_med']=0
mydata$crim_med[which(mydata$crim>median_crim)]=1
mydata$crim<-NULL
str(mydata$crim_med)
mydata$crim_med<-as.factor(mydata$crim_med)
## test-train split ##
library(caret)
set.seed(123)
datasplit<-createDataPartition(mydata$crim_med,p=0.75,list = F)
traindata<-mydata[datasplit,]
testdata<-mydata[-datasplit,]
summary(mydata$crim_med)
lda.fit<-lda(crim_med~.,data=traindata)
names(lda.fit)
lda.fit
summary(lda.fit)
train_nopred<-subset(traindata,select =-crim_med)
lda_pred_train<-predict(lda.fit,train_nopred)
y_hat_train<-as.numeric(lda_pred_train$class)-1
y_train<-as.numeric(traindata$crim_med)-1
train_err_lda<-sum(abs(y_hat_train-y_train))/length(y_train)
test_nopred<-subset(testdata,select =-crim_med)
lda_pred_test<-predict(lda.fit,test_nopred)
y_hat_test<-as.numeric(lda_pred_test$class)-1
y_test<-as.numeric(testdata$crim_med)-1
test_err_lda<-sum(abs(y_hat_test-y_test))/length(y_test)
train_err_lda
test_err_lda
### Logistic Regression ####
str(traindata)
log.fit<-glm(crim_med~.,data = traindata,family = 'binomial')
summary(log.fit)
log_pred_train<-predict(log.fit,newdata = train_nopred,type = 'response')
log_pred_train[which(log_pred_train>0.5)]=1
log_pred_train[which(log_pred_train<=0.5)]=0
y_train<-as.numeric(traindata$crim_med)-1
train_err_log<-sum(abs(log_pred_train-y_train))/length(y_train)
log_pred_test<-predict(log.fit,newdata = test_nopred,type = 'response')
log_pred_test[which(log_pred_test>0.5)]=1
log_pred_test[which(log_pred_test<=0.5)]=0
y_test<-as.numeric(testdata$crim_med)-1
test_err_log<-sum(abs(log_pred_test-y_test))/length(y_test)
train_err_log
test_err_log
### KNN ####
library(class)
knn_model<-knn(train_nopred,test_nopred,traindata$crim_med,k=3)
summary(knn_model)
knn_model
y_test<-as.numeric(testdata$crim_med)-1
y_test
knn_pred_test<-as.numeric(knn_model)
test_err_knn<-sum(abs(knn_pred_test-y_test))/length(y_test)
testdata$crim_med
knn_model<-knn(train_nopred,test_nopred,traindata$crim_med,k=3)
summary(knn_model)
y_test<-as.numeric(testdata$crim_med)
knn_pred_test<-as.numeric(knn_model)
test_err_knn<-sum(abs(knn_pred_test-y_test))/length(y_test)
test_err_knn
testdata$crim_med
traindata$crim_med
as.numeric(traindata$crim_med)
testdata$crim_med
as.numeric(testdata$crim_med)
y_test<-as.numeric(testdata$crim_med)-1
knn_pred_test<-as.numeric(knn_model)
test_err_knn<-sum(abs(knn_pred_test-y_test))/length(y_test)
as.numeric(testdata$crim_med)-1
knn_model
as.numeric(knn_model)
knn_pred_test<-as.numeric(knn_model)-1
test_err_knn<-sum(abs(knn_pred_test-y_test))/length(y_test)
knn_model
test_err_knn<-sum(abs(knn_pred_test-y_test))/length(y_test)
test_err_knn
length(mydata_set1$crim)/2
median_crim<-mydata_set1$crim[length(mydata_set1$crim)/2]
mydata_set1['crim_med']=0
mydata_set1$crim_med[which(mydata_set1$crim>median_crim)]=1
mydata_set1$crim<-NULL
str(mydata_set1$crim_med)
mydata_set1$crim_med<-as.factor(mydata_set1$crim_med)
## test-train split ##
library(caret)
set.seed(123)
datasplit<-createDataPartition(mydata_set1$crim_med,p=0.75,list = F)
traindata_set1<-mydata_set1[datasplit,]
testdata_set1<-mydata_set1[-datasplit,]
summary(mydata_set1$crim_med)
lda.fit_set1<-lda(crim_med~.,data=traindata_set1)
names(lda.fit_set1)
lda.fit_set1
summary(lda.fit_set1)
train_nopred_set1<-subset(traindata_set1,select =-crim_med)
lda_pred_train_set1<-predict(lda.fit_set1,train_nopred_set1)
y_hat_train_set1<-as.numeric(lda_pred_train_set1$class)-1
y_train_set1<-as.numeric(traindata_set1$crim_med)-1
train_err_lda_set1<-sum(abs(y_hat_train_set1-y_train_set1))/length(y_train_set1)
test_nopred_set1<-subset(testdata_set1,select =-crim_med)
lda_pred_test_set1<-predict(lda.fit_set1,test_nopred_set1)
y_hat_test_set1<-as.numeric(lda_pred_test_set1$class)-1
y_test_set1<-as.numeric(testdata_set1$crim_med)-1
test_err_lda_set1<-sum(abs(y_hat_test_set1-y_test_set1))/length(y_test_set1)
train_err_lda_set1
test_err_lda_set1
### Logistic Regression ###
str(traindata_set1)
log.fit_set1<-glm(crim_med~.,data = traindata_set1,family = 'binomial')
summary(log.fit_set1)
log_pred_train_set1<-predict(log.fit_set1,newdata = train_nopred_set1,type = 'response')
log_pred_train_set1[which(log_pred_train_set1>0.5)]=1
log_pred_train_set1[which(log_pred_train_set1<=0.5)]=0
y_train_set1<-as.numeric(traindata_set1$crim_med)-1
train_err_log_set1<-sum(abs(log_pred_train_set1-y_train_set1))/length(y_train_set1)
log_pred_test_set1<-predict(log.fit_set1,newdata = test_nopred_set1,type = 'response')
log_pred_test_set1[which(log_pred_test_set1>0.5)]=1
log_pred_test_set1[which(log_pred_test_set1<=0.5)]=0
y_test_set1<-as.numeric(testdata_set1$crim_med)-1
test_err_log_set1<-sum(abs(log_pred_test_set1-y_test_set1))/length(y_test_set1)
train_err_log_set1
test_err_log_set1
### KNN ###
library(class)
knn_model_set1<-knn(train_nopred_set1,test_nopred_set1,traindata_set1$crim_med,k=3)
y_test_set1<-as.numeric(testdata_set1$crim_med)-1
knn_pred_test_set1<-as.numeric(knn_model_set1)-1
test_err_knn_set1<-sum(abs(knn_pred_test_set1-y_test_set1))/length(y_test_set1)
test_err_knn_set1
length(mydata_set2$crim)/2
median_crim<-mydata_set2$crim[length(mydata_set2$crim)/2]
mydata_set2['crim_med']=0
mydata_set2$crim_med[which(mydata_set2$crim>median_crim)]=1
mydata_set2$crim<-NULL
str(mydata_set2$crim_med)
mydata_set2$crim_med<-as.factor(mydata_set2$crim_med)
## test-train split ##
library(caret)
set.seed(123)
datasplit<-createDataPartition(mydata_set2$crim_med,p=0.75,list = F)
traindata_set2<-mydata_set2[datasplit,]
testdata_set2<-mydata_set2[-datasplit,]
summary(mydata_set2$crim_med)
lda.fit_set2<-lda(crim_med~.,data=traindata_set2)
names(lda.fit_set2)
lda.fit_set2
summary(lda.fit_set2)
train_nopred_set2<-subset(traindata_set2,select =-crim_med)
lda_pred_train_set2<-predict(lda.fit_set2,train_nopred_set2)
y_hat_train_set2<-as.numeric(lda_pred_train_set2$class)-1
y_train_set2<-as.numeric(traindata_set2$crim_med)-1
train_err_lda_set2<-sum(abs(y_hat_train_set2-y_train_set2))/length(y_train_set2)
test_nopred_set2<-subset(testdata_set2,select =-crim_med)
lda_pred_test_set2<-predict(lda.fit_set2,test_nopred_set2)
y_hat_test_set2<-as.numeric(lda_pred_test_set2$class)-1
y_test_set2<-as.numeric(testdata_set2$crim_med)-1
test_err_lda_set2<-sum(abs(y_hat_test_set2-y_test_set2))/length(y_test_set2)
train_err_lda_set2
test_err_lda_set2
### Logistic Regression ###
str(traindata_set2)
log.fit_set2<-glm(crim_med~.,data = traindata_set2,family = 'binomial')
summary(log.fit_set2)
log_pred_train_set2<-predict(log.fit_set2,newdata = train_nopred_set2,type = 'response')
log_pred_train_set2[which(log_pred_train_set2>0.5)]=1
log_pred_train_set2[which(log_pred_train_set2<=0.5)]=0
y_train_set2<-as.numeric(traindata_set2$crim_med)-1
train_err_log_set2<-sum(abs(log_pred_train_set2-y_train_set2))/length(y_train_set2)
log_pred_test_set2<-predict(log.fit_set2,newdata = test_nopred_set2,type = 'response')
log_pred_test_set2[which(log_pred_test_set2>0.5)]=1
log_pred_test_set2[which(log_pred_test_set2<=0.5)]=0
y_test_set2<-as.numeric(testdata_set2$crim_med)-1
test_err_log_set2<-sum(abs(log_pred_test_set2-y_test_set2))/length(y_test_set2)
train_err_log_set2
test_err_log_set2
### KNN ###
library(class)
knn_model_set2<-knn(train_nopred_set2,test_nopred_set2,traindata_set2$crim_med,k=3)
y_test_set2<-as.numeric(testdata_set2$crim_med)-1
knn_pred_test_set2<-as.numeric(knn_model_set2)-1
test_err_knn_set2<-sum(abs(knn_pred_test_set2-y_test_set2))/length(y_test_set2)
test_err_knn_set2
#install.packages("corrplot")
library(ISLR)
library(MASS)
mydata <- read.table("Diabetes.txt",header = FALSE)
mydata <- subset(mydata,select = -c(V1,V2,V3,V4))
colnames(mydata) <- c("glucose.area","insulin.area","SSDG","relative.weight","fasting.plasma.glucose","class_no")
library(lattice)
library(ggplot2)
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
my_pch<-c(15,16,17)
pairs(mydata[,1:5], pch = my_pch[mydata$class_no],  cex = 1.5,col = my_cols[mydata$class_no],lower.panel=NULL)
########### COVARIANCE MATRIX #######
library(corrplot)
### CLASS 1 ###
class_1<-mydata[which(mydata$class_no==1),]
cov(as.matrix(class_1))
corrplot(cor(as.matrix(class_1[,-6])),title = "Class 1",mar=c(0,0,1,0))
### CLASS 2 ###
class_2<-mydata[which(mydata$class_no==2),]
cov(as.matrix(class_2))
corrplot(cor(as.matrix(class_2[,-6])),title = "Class 2",mar=c(0,0,1,0))
class_3<-mydata[which(mydata$class_no==3),]
cov(as.matrix(class_3))
corrplot(cor(as.matrix(class_3[,-6])),title = "Class 3",mar=c(0,0,1,0))
### CLASS 1 ###
plot((density(class_1$glucose.area)),main = "Distribution of glucose.area")
plot((density(class_1$insulin.area)),main = "Distribution of insulin.area")
plot((density(class_1$SSDG)),main = "Distribution of SSDG")
plot((density(class_1$relative.weight)),main = "Relative weight")
plot((density(class_1$fasting.plasma.glucose)),main = "Distribution of Fasting Plasma Glucose")
### CLASS 2 ###
plot((density(class_2$glucose.area)),main = "Distribution of glucose.area")
plot((density(class_2$insulin.area)),main = "Distribution of insulin.area")
plot((density(class_2$SSDG)),main = "Distribution of SSDG")
plot((density(class_2$relative.weight)),main = "Relative weight")
plot((density(class_2$fasting.plasma.glucose)),main = "Distribution of Fasting Plasma Glucose")
### CLASS 3 ###
plot((density(class_3$glucose.area)),main = "Distribution of glucose.area")
plot((density(class_3$insulin.area)),main = "Distribution of insulin.area")
plot((density(class_3$SSDG)),main = "Distribution of SSDG")
plot((density(class_3$relative.weight)),main = "Relative weight")
plot((density(class_3$fasting.plasma.glucose)),main = "Distribution of Fasting Plasma Glucose")
set.seed(123)
## test-train split ##
library(caret)
datasplit<-createDataPartition(mydata$class_no,p=0.75,list = F)
traindata<-mydata[datasplit,]
testdata<-mydata[-datasplit,]
## LDA model ####
lda.fit<-lda(class_no~.,data = traindata)
names(lda.fit)
lda.fit
train_nopred<-subset(traindata,select =-class_no)
test_nopred<-subset(testdata,select =-class_no)
## LDA train prediction ##
lda_pred_train<-predict(lda.fit,train_nopred)
y_hat_train<-as.numeric(lda_pred_train$class)
y_train<-as.numeric(traindata$class_no)
train_err_lda<-sum(abs(y_hat_train-y_train))/length(y_train)
## LDA test prediction ##
lda_pred_test<-predict(lda.fit,test_nopred)
y_hat_test<-as.numeric(lda_pred_test$class)
y_test<-as.numeric(testdata$class_no)
test_err_lda<-sum(abs(y_hat_test-y_test))/length(y_test)
qda.fit<-qda(class_no~.,data = traindata)
names(qda.fit)
qda.fit
## qda test prediction ##
qda_pred_train<-predict(qda.fit,train_nopred)
y_hat_train_qda<-as.numeric(qda_pred_train$class)
y_train_qda<-as.numeric(traindata$class_no)
train_err_qda<-sum(abs(y_hat_train_qda-y_train_qda))/length(y_train_qda)
## qda test prediction ##
qda_pred_test<-predict(qda.fit,test_nopred)
y_hat_test_qda<-as.numeric(qda_pred_test$class)
y_test_qda<-as.numeric(testdata$class_no)
test_err_qda<-sum(abs(y_hat_test_qda-y_test_qda))/length(y_test_qda)
newdata<-data.frame("glucose.area"=0.98,"insulin.area"=122,"SSDG"=544,"relative.weight"=186,"fasting.plasma.glucose"=184)
lda_newdata<-predict(lda.fit,newdata)
lda_newdata$class
qda_newdata<-predict(qda.fit,newdata)
qda_newdata$class
cov(as.matrix(class_1))
pairs(mydata[,1:5], pch = my_pch[mydata$class_no],  cex = 1.5,col = my_cols[mydata$class_no])
### CLASS 1 ###
par(mfrow(2,3))
### CLASS 1 ###
par(mfrow=c(2,3))
plot((density(class_1$glucose.area)),main = "Distribution of glucose.area")
plot((density(class_1$insulin.area)),main = "Distribution of insulin.area")
plot((density(class_1$SSDG)),main = "Distribution of SSDG")
plot((density(class_1$relative.weight)),main = "Relative weight")
plot((density(class_1$fasting.plasma.glucose)),main = "Distribution of Fasting Plasma Glucose")
### CLASS 2 ###
plot((density(class_2$glucose.area)),main = "Distribution of glucose.area")
plot((density(class_2$insulin.area)),main = "Distribution of insulin.area")
plot((density(class_2$SSDG)),main = "Distribution of SSDG")
plot((density(class_2$relative.weight)),main = "Relative weight")
plot((density(class_2$fasting.plasma.glucose)),main = "Distribution of Fasting Plasma Glucose")
### CLASS 1 ###
par(mfrow=c(2,3))
### CLASS 1 ###
par(mfrow=c(2,3))
### CLASS 2 ###
plot((density(class_2$glucose.area)),main = "Distribution of glucose.area")
plot((density(class_2$insulin.area)),main = "Distribution of insulin.area")
plot((density(class_2$SSDG)),main = "Distribution of SSDG")
plot((density(class_2$relative.weight)),main = "Relative weight")
plot((density(class_2$fasting.plasma.glucose)),main = "Distribution of Fasting Plasma Glucose")
### CLASS 1 ###
par(mfrow=c(2,3))
### CLASS 3 ###
plot((density(class_3$glucose.area)),main = "Distribution of glucose.area")
plot((density(class_3$insulin.area)),main = "Distribution of insulin.area")
plot((density(class_3$SSDG)),main = "Distribution of SSDG")
plot((density(class_3$relative.weight)),main = "Relative weight")
plot((density(class_3$fasting.plasma.glucose)),main = "Distribution of Fasting Plasma Glucose")
train_err_lda
test_err_lda
train_err_qda
test_err_qda
